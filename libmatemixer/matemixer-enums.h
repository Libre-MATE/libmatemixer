/*
 * Copyright (C) 2014 Michal Ratajsky <michal.ratajsky@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the licence, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef MATEMIXER_ENUMS_H
#define MATEMIXER_ENUMS_H

/*
 * GTypes are not generated by glib-mkenums, see:
 * https://bugzilla.gnome.org/show_bug.cgi?id=621942
 */

typedef enum {
    MATE_MIXER_STATE_IDLE = 0,
    MATE_MIXER_STATE_CONNECTING,
    MATE_MIXER_STATE_READY,
    MATE_MIXER_STATE_FAILED,
    MATE_MIXER_STATE_UNKNOWN
} MateMixerState;

typedef enum {
    MATE_MIXER_BACKEND_UNKNOWN = 0,
    MATE_MIXER_BACKEND_PULSE,
    MATE_MIXER_BACKEND_NULL
} MateMixerBackendType;

typedef enum {
    MATE_MIXER_PORT_UNKNOWN_STATUS,
    MATE_MIXER_PORT_AVAILABLE,
    MATE_MIXER_PORT_UNAVAILABLE
} MateMixerPortStatus;

typedef enum { /*< flags >*/
    MATE_MIXER_STREAM_NO_FLAGS            = 0,
    MATE_MIXER_STREAM_INPUT               = 1 << 0,
    MATE_MIXER_STREAM_OUTPUT              = 1 << 1,
    MATE_MIXER_STREAM_CLIENT              = 1 << 2,
    MATE_MIXER_STREAM_APPLICATION         = 1 << 3,
    MATE_MIXER_STREAM_OUTPUT_MONITOR      = 1 << 4,
    MATE_MIXER_STREAM_HAS_MUTE            = 1 << 5,
    MATE_MIXER_STREAM_HAS_VOLUME          = 1 << 6,
    MATE_MIXER_STREAM_HAS_DECIBEL_VOLUME  = 1 << 7,
    MATE_MIXER_STREAM_HAS_FLAT_VOLUME     = 1 << 8,
    MATE_MIXER_STREAM_CAN_BALANCE         = 1 << 9,
    MATE_MIXER_STREAM_CAN_FADE            = 1 << 10,
    MATE_MIXER_STREAM_CAN_SET_VOLUME      = 1 << 11
} MateMixerStreamFlags;

typedef enum {
    MATE_MIXER_STREAM_UNKNOWN_STATUS,
    MATE_MIXER_STREAM_RUNNING,
    MATE_MIXER_STREAM_IDLE,
    MATE_MIXER_STREAM_SUSPENDED
} MateMixerStreamStatus;

typedef enum {
    MATE_MIXER_CHANNEL_UNKNOWN_POSITION,
    MATE_MIXER_CHANNEL_MONO,
    MATE_MIXER_CHANNEL_FRONT_LEFT,
    MATE_MIXER_CHANNEL_FRONT_RIGHT,
    MATE_MIXER_CHANNEL_FRONT_CENTER,
    MATE_MIXER_CHANNEL_LFE,
    MATE_MIXER_CHANNEL_BACK_LEFT,
    MATE_MIXER_CHANNEL_BACK_RIGHT,
    MATE_MIXER_CHANNEL_FRONT_LEFT_CENTER,
    MATE_MIXER_CHANNEL_FRONT_RIGHT_CENTER,
    MATE_MIXER_CHANNEL_BACK_CENTER,
    MATE_MIXER_CHANNEL_SIDE_LEFT,
    MATE_MIXER_CHANNEL_SIDE_RIGHT,
    MATE_MIXER_CHANNEL_TOP_FRONT_LEFT,
    MATE_MIXER_CHANNEL_TOP_FRONT_RIGHT,
    MATE_MIXER_CHANNEL_TOP_FRONT_CENTER,
    MATE_MIXER_CHANNEL_TOP_CENTER,
    MATE_MIXER_CHANNEL_TOP_BACK_LEFT,
    MATE_MIXER_CHANNEL_TOP_BACK_RIGHT,
    MATE_MIXER_CHANNEL_TOP_BACK_CENTER
} MateMixerChannelPosition;

#endif /* MATEMIXER_ENUMS_H */
