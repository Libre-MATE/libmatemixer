/*
 * Copyright (C) 2014 Michal Ratajsky <michal.ratajsky@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the licence, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef MATEMIXER_ENUMS_H
#define MATEMIXER_ENUMS_H

/*
 * GTypes are not generated by glib-mkenums, see:
 * https://bugzilla.gnome.org/show_bug.cgi?id=621942
 */

/**
 * MateMixerState:
 * @MATE_MIXER_STATE_IDLE:
 * @MATE_MIXER_STATE_CONNECTING:
 * @MATE_MIXER_STATE_READY:
 * @MATE_MIXER_STATE_FAILED:
 * @MATE_MIXER_STATE_UNKNOWN:
 */
typedef enum {
    MATE_MIXER_STATE_IDLE,
    MATE_MIXER_STATE_CONNECTING,
    MATE_MIXER_STATE_READY,
    MATE_MIXER_STATE_FAILED,
    MATE_MIXER_STATE_UNKNOWN
} MateMixerState;

/**
 * MateMixerBackendType:
 * @MATE_MIXER_BACKEND_UNKNOWN:
 *     Unknown or undefined backend type.
 * @MATE_MIXER_BACKEND_PULSEAUDIO:
 *     PulseAudio sound system backend. It has the highest priority and
 *     will be the first one to try unless you select a specific backend
 *     to connect to.
 * @MATE_MIXER_BACKEND_OSS:
 * @MATE_MIXER_BACKEND_NULL:
 *     Fallback backend which never fails to initialize, but provides no
 *     functionality. This backend has the lowest priority and will be used
 *     if you do not select a specific backend to connect to and all the
 *     "real" backends fail to initialize.
 */
typedef enum {
    MATE_MIXER_BACKEND_UNKNOWN,
    MATE_MIXER_BACKEND_PULSEAUDIO,
    MATE_MIXER_BACKEND_OSS,
    MATE_MIXER_BACKEND_NULL
} MateMixerBackendType;

/**
 * MateMixerPortFlags:
 * @MATE_MIXER_PORT_NO_FLAGS:
 * @MATE_MIXER_PORT_AVAILABLE:
 * @MATE_MIXER_PORT_INPUT:
 * @MATE_MIXER_PORT_OUTPUT:
 */
typedef enum { /*< flags >*/
    MATE_MIXER_PORT_NO_FLAGS    = 0,
    MATE_MIXER_PORT_AVAILABLE   = 1 << 0,
    MATE_MIXER_PORT_INPUT       = 1 << 1,
    MATE_MIXER_PORT_OUTPUT      = 1 << 2
} MateMixerPortFlags;

/**
 * MateMixerStreamFlags:
 * @MATE_MIXER_STREAM_NO_FLAGS:
 * @MATE_MIXER_STREAM_INPUT:
 * @MATE_MIXER_STREAM_OUTPUT:
 * @MATE_MIXER_STREAM_CLIENT:
 * @MATE_MIXER_STREAM_HAS_MUTE:
 * @MATE_MIXER_STREAM_HAS_VOLUME:
 * @MATE_MIXER_STREAM_HAS_DECIBEL_VOLUME:
 * @MATE_MIXER_STREAM_HAS_FLAT_VOLUME:
 * @MATE_MIXER_STREAM_HAS_MONITOR:
 * @MATE_MIXER_STREAM_CAN_SET_VOLUME:
 * @MATE_MIXER_STREAM_CAN_BALANCE:
 * @MATE_MIXER_STREAM_CAN_FADE:
 * @MATE_MIXER_STREAM_CAN_SUSPEND:
 */
typedef enum { /*< flags >*/
    MATE_MIXER_STREAM_NO_FLAGS            = 0,
    MATE_MIXER_STREAM_INPUT               = 1 << 0,
    MATE_MIXER_STREAM_OUTPUT              = 1 << 1,
    MATE_MIXER_STREAM_CLIENT              = 1 << 2,
    MATE_MIXER_STREAM_HAS_MUTE            = 1 << 3,
    MATE_MIXER_STREAM_HAS_VOLUME          = 1 << 4,
    MATE_MIXER_STREAM_HAS_DECIBEL_VOLUME  = 1 << 5,
    MATE_MIXER_STREAM_HAS_FLAT_VOLUME     = 1 << 6,
    MATE_MIXER_STREAM_HAS_MONITOR         = 1 << 7,
    MATE_MIXER_STREAM_CAN_SET_VOLUME      = 1 << 8,
    MATE_MIXER_STREAM_CAN_BALANCE         = 1 << 9,
    MATE_MIXER_STREAM_CAN_FADE            = 1 << 10,
    MATE_MIXER_STREAM_CAN_SUSPEND         = 1 << 11
} MateMixerStreamFlags;

/**
 * MateMixerStreamState:
 * @MATE_MIXER_STREAM_STATE_UNKNOWN:
 * @MATE_MIXER_STREAM_STATE_RUNNING:
 * @MATE_MIXER_STREAM_STATE_IDLE:
 * @MATE_MIXER_STREAM_STATE_SUSPENDED:
 */
typedef enum {
    MATE_MIXER_STREAM_STATE_UNKNOWN,
    MATE_MIXER_STREAM_STATE_RUNNING,
    MATE_MIXER_STREAM_STATE_IDLE,
    MATE_MIXER_STREAM_STATE_SUSPENDED
} MateMixerStreamState;

/**
 * MateMixerClientStreamFlags:
 * @MATE_MIXER_CLIENT_STREAM_NO_FLAGS:
 * @MATE_MIXER_CLIENT_STREAM_APPLICATION:
 * @MATE_MIXER_CLIENT_STREAM_CACHED:
 */
typedef enum { /*< flags >*/
    MATE_MIXER_CLIENT_STREAM_NO_FLAGS    = 0,
    MATE_MIXER_CLIENT_STREAM_APPLICATION = 1 << 0,
    MATE_MIXER_CLIENT_STREAM_CACHED      = 1 << 1,
} MateMixerClientStreamFlags;

/**
 * MateMixerClientStreamRole:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_NONE:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_VIDEO:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_MUSIC:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_GAME:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_EVENT:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_PHONE:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_ANIMATION:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_PRODUCTION:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_A11Y:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_TEST:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_ABSTRACT:
 * @MATE_MIXER_CLIENT_STREAM_ROLE_FILTER:
 */
typedef enum {
    MATE_MIXER_CLIENT_STREAM_ROLE_NONE,
    MATE_MIXER_CLIENT_STREAM_ROLE_VIDEO,
    MATE_MIXER_CLIENT_STREAM_ROLE_MUSIC,
    MATE_MIXER_CLIENT_STREAM_ROLE_GAME,
    MATE_MIXER_CLIENT_STREAM_ROLE_EVENT,
    MATE_MIXER_CLIENT_STREAM_ROLE_PHONE,
    MATE_MIXER_CLIENT_STREAM_ROLE_ANIMATION,
    MATE_MIXER_CLIENT_STREAM_ROLE_PRODUCTION,
    MATE_MIXER_CLIENT_STREAM_ROLE_A11Y,
    MATE_MIXER_CLIENT_STREAM_ROLE_TEST,
    MATE_MIXER_CLIENT_STREAM_ROLE_ABSTRACT,
    MATE_MIXER_CLIENT_STREAM_ROLE_FILTER
} MateMixerClientStreamRole;

/**
 * MateMixerChannelPosition:
 * @MATE_MIXER_CHANNEL_UNKNOWN:
 * @MATE_MIXER_CHANNEL_MONO:
 * @MATE_MIXER_CHANNEL_FRONT_LEFT:
 * @MATE_MIXER_CHANNEL_FRONT_RIGHT:
 * @MATE_MIXER_CHANNEL_FRONT_CENTER:
 * @MATE_MIXER_CHANNEL_LFE:
 * @MATE_MIXER_CHANNEL_BACK_LEFT:
 * @MATE_MIXER_CHANNEL_BACK_RIGHT:
 * @MATE_MIXER_CHANNEL_BACK_CENTER:
 * @MATE_MIXER_CHANNEL_FRONT_LEFT_CENTER:
 * @MATE_MIXER_CHANNEL_FRONT_RIGHT_CENTER:
 * @MATE_MIXER_CHANNEL_SIDE_LEFT:
 * @MATE_MIXER_CHANNEL_SIDE_RIGHT:
 * @MATE_MIXER_CHANNEL_TOP_FRONT_LEFT:
 * @MATE_MIXER_CHANNEL_TOP_FRONT_RIGHT:
 * @MATE_MIXER_CHANNEL_TOP_FRONT_CENTER:
 * @MATE_MIXER_CHANNEL_TOP_CENTER:
 * @MATE_MIXER_CHANNEL_TOP_BACK_LEFT:
 * @MATE_MIXER_CHANNEL_TOP_BACK_RIGHT:
 * @MATE_MIXER_CHANNEL_TOP_BACK_CENTER:
 */
typedef enum {
    MATE_MIXER_CHANNEL_UNKNOWN,
    MATE_MIXER_CHANNEL_MONO,
    MATE_MIXER_CHANNEL_FRONT_LEFT,
    MATE_MIXER_CHANNEL_FRONT_RIGHT,
    MATE_MIXER_CHANNEL_FRONT_CENTER,
    MATE_MIXER_CHANNEL_LFE,
    MATE_MIXER_CHANNEL_BACK_LEFT,
    MATE_MIXER_CHANNEL_BACK_RIGHT,
    MATE_MIXER_CHANNEL_BACK_CENTER,
    MATE_MIXER_CHANNEL_FRONT_LEFT_CENTER,
    MATE_MIXER_CHANNEL_FRONT_RIGHT_CENTER,
    MATE_MIXER_CHANNEL_SIDE_LEFT,
    MATE_MIXER_CHANNEL_SIDE_RIGHT,
    MATE_MIXER_CHANNEL_TOP_FRONT_LEFT,
    MATE_MIXER_CHANNEL_TOP_FRONT_RIGHT,
    MATE_MIXER_CHANNEL_TOP_FRONT_CENTER,
    MATE_MIXER_CHANNEL_TOP_CENTER,
    MATE_MIXER_CHANNEL_TOP_BACK_LEFT,
    MATE_MIXER_CHANNEL_TOP_BACK_RIGHT,
    MATE_MIXER_CHANNEL_TOP_BACK_CENTER
} MateMixerChannelPosition;

#endif /* MATEMIXER_ENUMS_H */
